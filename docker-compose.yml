services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=whisperdb
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 1.5G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d whisperdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/whisperdb
      - REDIS_URL=redis://redis:6379/0
      - MAX_FILE_SIZE=100000000
      - MODEL_SIZE=base
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network

  celery_worker:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    command: celery -A app.worker worker -l info --concurrency=2 --max-memory-per-child=512000
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/whisperdb
      - REDIS_URL=redis://redis:6379/0
    deploy:
      resources:
        limits:
          memory: 2.5G
        reservations:
          memory: 1.5G
    depends_on:
      - redis
      - backend
    networks:
      - backend-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    networks:
      - frontend-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $!; done;'"

volumes:
  postgres_data:
  redis_data:

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge