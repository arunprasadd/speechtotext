version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=whisperdb
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 1.5G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d whisperdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    volumes:
      - ./backend:/app
      - uploads_volume:/app/uploads
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/whisperdb
      - REDIS_URL=redis://redis:6379/0
      - MAX_FILE_SIZE=100000000
      - MODEL_SIZE=base
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network

  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=https://transcriptwithai.com
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - frontend-network
    deploy:
      resources:
        limits:
          memory: 1G

  celery_worker:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    command: >
      sh -c "
        mkdir -p /app/uploads/recordings &&
        chmod -R 777 /app/uploads &&
        celery -A app.celery.celery_app worker 
        --loglevel=info 
        --concurrency=2
      "
    volumes:
      - ./backend:/app
      - uploads_volume:/app/uploads
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/whisperdb
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_BROKER_CONNECTION_RETRY=true
      - CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - C_FORCE_ROOT=true
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      disable: true

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - uploads_volume:/app/uploads:ro
    depends_on:
      - backend
      - frontend
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: >-
      certonly --webroot -w /var/www/certbot 
      --email your@email.com
      --agree-tos 
      --no-eff-email
      -d transcriptwithai.com
      -d www.transcriptwithai.com

volumes:
  postgres_data:
  redis_data:
  uploads_volume:
    name: speechtotext_uploads

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge